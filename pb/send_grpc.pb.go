// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SendServiceClient is the client API for SendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SendServiceClient interface {
	SendMail(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*SendResp, error)
	SendMails(ctx context.Context, opts ...grpc.CallOption) (SendService_SendMailsClient, error)
}

type sendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSendServiceClient(cc grpc.ClientConnInterface) SendServiceClient {
	return &sendServiceClient{cc}
}

func (c *sendServiceClient) SendMail(ctx context.Context, in *SendReq, opts ...grpc.CallOption) (*SendResp, error) {
	out := new(SendResp)
	err := c.cc.Invoke(ctx, "/pb.SendService/SendMail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendServiceClient) SendMails(ctx context.Context, opts ...grpc.CallOption) (SendService_SendMailsClient, error) {
	stream, err := c.cc.NewStream(ctx, &SendService_ServiceDesc.Streams[0], "/pb.SendService/SendMails", opts...)
	if err != nil {
		return nil, err
	}
	x := &sendServiceSendMailsClient{stream}
	return x, nil
}

type SendService_SendMailsClient interface {
	Send(*SendReq) error
	Recv() (*SendResp, error)
	grpc.ClientStream
}

type sendServiceSendMailsClient struct {
	grpc.ClientStream
}

func (x *sendServiceSendMailsClient) Send(m *SendReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sendServiceSendMailsClient) Recv() (*SendResp, error) {
	m := new(SendResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SendServiceServer is the server API for SendService service.
// All implementations must embed UnimplementedSendServiceServer
// for forward compatibility
type SendServiceServer interface {
	SendMail(context.Context, *SendReq) (*SendResp, error)
	SendMails(SendService_SendMailsServer) error
	mustEmbedUnimplementedSendServiceServer()
}

// UnimplementedSendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSendServiceServer struct {
}

func (UnimplementedSendServiceServer) SendMail(context.Context, *SendReq) (*SendResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMail not implemented")
}
func (UnimplementedSendServiceServer) SendMails(SendService_SendMailsServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMails not implemented")
}
func (UnimplementedSendServiceServer) mustEmbedUnimplementedSendServiceServer() {}

// UnsafeSendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendServiceServer will
// result in compilation errors.
type UnsafeSendServiceServer interface {
	mustEmbedUnimplementedSendServiceServer()
}

func RegisterSendServiceServer(s grpc.ServiceRegistrar, srv SendServiceServer) {
	s.RegisterService(&SendService_ServiceDesc, srv)
}

func _SendService_SendMail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServiceServer).SendMail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SendService/SendMail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServiceServer).SendMail(ctx, req.(*SendReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendService_SendMails_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SendServiceServer).SendMails(&sendServiceSendMailsServer{stream})
}

type SendService_SendMailsServer interface {
	Send(*SendResp) error
	Recv() (*SendReq, error)
	grpc.ServerStream
}

type sendServiceSendMailsServer struct {
	grpc.ServerStream
}

func (x *sendServiceSendMailsServer) Send(m *SendResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sendServiceSendMailsServer) Recv() (*SendReq, error) {
	m := new(SendReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SendService_ServiceDesc is the grpc.ServiceDesc for SendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SendService",
	HandlerType: (*SendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMail",
			Handler:    _SendService_SendMail_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMails",
			Handler:       _SendService_SendMails_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "send.proto",
}
